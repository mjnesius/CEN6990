service cloud.firestore {
  match /databases/{database}/documents {
	function isOwner() {
        return request.auth.uid == resource.data.user_id;
    }
	function isSignedIn() {
      return request.auth != null;
    }
	function existingData() {
      return resource.data;
    }
  function incomingData() {
      return request.resource.data;
    }
	function isUser(userId) {
      return request.auth.uid == userId;
    }
	function userName() {
      return request.auth.token.name;
    }
	function isAdmin() {
      return get(/databases/$(database)/documents/admin/$(request.auth.uid)).data.admin == true;
    }
	function isValidText(text) {
      return text is string && text.size() < 1000;
    }
	

    match /admin/{id} {
      allow read: if isSignedIn();
      allow write: if false;
    }
    match /comments/{id} {
      allow read: if isSignedIn(); 
      allow write: if isValidText(incomingData().course) && isSignedIn()
        && incomingData().alias == userName() 
        && isValidText(incomingData().content);
    }
    match /contacts/{id} {
      allow read: if false;
      allow write: if isValidText(incomingData().email)
        && isValidText(incomingData().message)
        && isValidText(incomingData().name);
    }
    match /courses/{id} {
      allow read: if true; 
      allow write: if isAdmin();
    }
    match /trending/{id} {
      allow read: if isSignedIn(); 
      allow write: if isSignedIn()
        && incomingData().count is int
        && isValidText(incomingData().instructor)
        && isValidText(incomingData().title);
    }
    match /users/{id} {
      allow read: if isSignedIn() && isOwner(); 
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner()
        && incomingData().alias == existingData().alias
        && incomingData().history is list
        && incomingData().history.size() < 20
        && isUser(incomingData().user_id);
      allow delete: if false;
    }
  }
}